


public class VetorLista implements Lista {      //Não da pra usar tipos de prototipo
    
    private double[] vetor;
    private int tamanhoLista;
    
    public VetorLista() {
        this.vetor = new double[100];       //Quanto de armazenamento
        this.tamanhoLista = 0;
    }
    

    
    //Uma parte de baixo o NetBeans programou para mim, pois ele viu q estava no modo abistrato
    @Override
    public boolean inserirElemento(double valor, int pos) {
        if ((pos < 0) || (pos > this.length())) {
            return false;
        } else if ((pos == 0) && (this.length() == 0)) {
            this .vetor[0] = valor;
            this.tamanhoLista++;
            return true;
        } else if (this.length() > 0) {
            for (int i = this.length(); i >= pos; i--) {
                vetor[i + 1] = vetor [i];
            }
            vetor[pos] = valor;
            this.tamanhoLista++;
            return true;
        } else if (pos == this.length()) {
            vetor[pos] = valor;
            this.tamanhoLista++;
            return true;
        } else {
            return false;
        }
    }

    public boolean inserirElemento(double valor) {
        this.vetor[this.length()] = valor;
        this.tamanhoLista++;
        return true;
    }
    
    @Override
    public double lerElemento(int pos) throws Exception {
        if (this.validaPosicao(pos)) {
            return this.vetor[pos];
        } else {
            throw new Exception("Posicao invalida");
            
        }
    }

    @Override
    public boolean removerElemento(int pos) {
        throw new UnsupportedOperationException("Not supported yet."); 
    }

    @Override
    public void imprimir() {
        for (int i = 0; i < this.length(); i++) {
            System.out.println("Elemento(" + i + ") = " + this.vetor[i]);       
        } 
        System.out.println("-------------------------");
    }

    @Override
    public int length() {
        return this.tamanhoLista;
    }
    
    private boolean validaPosicao(int pos) {        //O metodo é privado pois só a clase vai usar ele
        return ((pos < 0) || (pos > this.length()));
/*
        {
            return false;           ou usa esse ou usa o de cima q é mais simples
        } else {
            return true;
*/

    }
    
}
